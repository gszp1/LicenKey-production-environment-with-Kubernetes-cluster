- name: Set up Kubernetes worker node
  hosts: kubernetes_common
  become: yes
  gather_facts: true
  tasks:
    - name: Change owner of /mnt directory to ansible user
      ansible.builtin.file:
        path: /mnt
        owner: "{{ ansible_user }}"
        state: directory

    - name: Create a directory for container registry
      ansible.builtin.file:
        path: /mnt/container-registry
        state: directory

    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install aptitude
      apt:
        name: aptitude
        state: latest
        update_cache: true

    - name: Install required system packages
      apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-pip
          - virtualenv
          - python3-setuptools
          - gnupg-agent
          - software-properties-common
          - jq
          - gpg
        state: latest
        update_cache: true

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu focal stable
        state: present

    - name: Update apt and install docker-ce
      apt:
        pkg:
          - containerd.io
          - docker-ce
          - docker-ce-cli
          - docker
        state: latest
        update_cache: true

    # - name: Set private repository data in docker daemon config
    #   ansible.builtin.copy:
    #     dest: /etc/docker/daemon.json
    #     content: |
    #       {
    #         "insecure-registries": [
    #           "docker-registry-sv.docker-registry-ns.svc.cluster.local:5000"
    #         ]
    #       }
    #     owner: root
    #     group: root
    #     mode: '0644'

    # - name: Reload docker daemon
    #   ansible.builtin.systemd:
    #     daemon_reload: true

    # - name: Restart docker daemon
    #   ansible.builtin.systemd:
    #     name: docker
    #     state: restarted

    - name: Remove swapfile from /etc/fstab
      mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      with_items:
        - swap
        - none

    - name: Disable swap
      command: swapoff -a
      when: ansible_swaptotal_mb > 0

    - name: Ensure /etc/apt/keyrings directory exists
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download and dearmor Kubernetes GPG key
      shell: |
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Add Kubernetes apt repository
      apt_repository:
        repo: 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /'
        filename: 'kubernetes.list'
        state: present

    - name: Update apt cache again
      apt:
        update_cache: yes

    - name: Install Kubernetes packages
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present

    - name: Configure node ip
      lineinfile:
        path: /etc/default/kubelet
        line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}
        create: yes

    - name: Generate default containerd configuration
      shell: "containerd config default > /etc/containerd/config.toml"

    - name: Restart containerd service
      systemd:
        name: containerd
        state: restarted

    - name: Load br_netfilter kernel module
      ansible.builtin.modprobe:
        name: br_netfilter
        state: present

    - name: Ensure br_netfilter module is loaded on boot
      ansible.builtin.copy:
        dest: /etc/modules-load.d/br_netfilter.conf
        content: "br_netfilter\n"
        owner: root
        group: root
        mode: '0644'

    - name: Set and persist sysctl parameters for Kubernetes networking
      ansible.builtin.sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
        sysctl_set: yes
        sysctl_file: /etc/sysctl.d/k8s.conf
      loop:
        - { name: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }
        - { name: 'net.bridge.bridge-nf-call-iptables',  value: '1' }
        - { name: 'net.bridge.bridge-nf-call-arptables', value: '1' }

    - name: Enable and start kubelet service
      systemd:
        name: kubelet
        enabled: yes
        state: restarted